REM NAME: MOD: CONTROL PID VAVs
REM DESCRIPTION: Implementa control PI para VAVs de suministro y retorno basado en error de caudal.
REM ID PROGRAMA: PRG4
REM ID CONTROLADOR: 10021
REM AUTHOR: Carlos Jiménez Hirashi @cjhirashi, Adaptación: Asistente de IA
REM VERSION: 1.5.0
REM 27/MAR/2025

REM DECLARACION DE PUNTOS DE CONTROL

    REM CONSTANTES INTERNAS

        REM CONSTANTES: LÍMITES DE DEMANDA
        LOCALS MAX_L, MIN_L
            MAX_L = 100     : REM Límite máximo para demanda de compuerta ( % )
            MIN_L = 0       : REM Límite mínimo para demanda de compuerta ( % )

    REM VARIABLES INTERNAS

        REM VARIABLES: CONTROL PID VAV GRANDE (VG)
        LOCALS VG_T, VG_ERR, VG_PR, VG_IR, VG_IS

        REM VARIABLES: CONTROL PID VAV MEDIANA (VM)
        LOCALS VM_T, VM_ERR, VM_PR, VM_IR, VM_IS

        REM VARIABLES: CONTROL PID VAV CHICA (VC)
        LOCALS VC_T, VC_ERR, VC_PR, VC_IR, VC_IS

        REM VARIABLES: CONTROL PID VAV GRANDE RETORNO (VGR)
        LOCALS VGR_T, VGR_ERR, VGR_PR, VGR_IR, VGR_IS

        REM VARIABLES: CONTROL PID VAV CHICA RETORNO (VCR)
        LOCALS VCR_T, VCR_ERR, VCR_PR, VCR_IR, VCR_IS

    REM VARIABLES EXTERNAS

        REM ESTADO DEL SISTEMA Y PERMISOS VAV
        LOCALS SS_CP, VG_ACT, VM_ACT, VC_ACT, VGR_ACT, VCR_ACT
            SS_CP = BV1     : REM SISTEMA - ACTIVACION ( ACTIVA/INACTIVA )
            VG_ACT = BV9    : REM VAV GRANDE - ACTIVACION ( ACTIVA/INACTIVA )
            VM_ACT = BV10   : REM VAV MEDIANA - ACTIVACION ( ACTIVA/INACTIVA )
            VC_ACT = BV11   : REM VAV CHICA - ACTIVACION ( ACTIVA/INACTIVA )
            VGR_ACT = BV12  : REM VAV GRANDE RETORNO - ACTIVACION ( ACTIVA/INACTIVA )
            VCR_ACT = BV13  : REM VAV CHICA RETORNO - ACTIVACION ( ACTIVA/INACTIVA )

        REM GANANCIAS PID
        LOCALS VG_P, VG_I, VM_P, VM_I, VC_P, VC_I
            VG_P = AV69     : REM CAJA GRANDE - VALOR PROPORCIONAL ( )
            VG_I = AV70     : REM CAJA GRANDE - VALOR INTEGRAL ( )
            VM_P = AV71     : REM CAJA MEDIANA - VALOR PROPORCIONAL ( )
            VM_I = AV72     : REM CAJA MEDIANA - VALOR INTEGRAL ( )
            VC_P = AV73     : REM CAJA CHICA - VALOR PROPORCIONAL ( )
            VC_I = AV74     : REM CAJA CHICA - VALOR INTEGRAL ( )

        REM CAUDALES ACTUALES (Q)
        LOCALS VG_Q, VM_Q, VC_Q, VGR_Q, VCR_Q
            VG_Q = AV98     : REM VAV GRANDE ACTIVA - CAUDAL ( cfm )
            VM_Q = AV99     : REM VAV MEDIANA ACTIVA - CAUDAL ( cfm )
            VC_Q = AV100    : REM VAV CHICA ACTIVA - CAUDAL ( cfm )
            VGR_Q = AV102   : REM VAV GRANDE RETORNO - CAUDAL ( cfm )
            VCR_Q = AV103   : REM VAV CHICA RETORNO - CAUDAL ( cfm )

        REM SETPOINTS DE CAUDAL (Q-SP)
        LOCALS VG_Q_SP, VM_Q_SP, VC_Q_SP, VGR_Q_SP, VCR_Q_SP
            VG_Q_SP = AV107 : REM VAV GRANDE ACTIVA - SETPOINT DE CAUDAL ( cfm )
            VM_Q_SP = AV108 : REM VAV MEDIANA ACTIVA - SETPOINT DE CAUDAL ( cfm )
            VC_Q_SP = AV109 : REM VAV CHICA ACTIVA - SETPOINT DE CAUDAL ( cfm )
            VGR_Q_SP = AV110: REM VAV GRANDE RETORNO - SETPOINT DE CAUDAL ( cfm )
            VCR_Q_SP = AV111: REM VAV CHICA RETORNO - SETPOINT DE CAUDAL ( cfm )

        REM DEMANDAS CALCULADAS (SALIDAS)
        LOCALS VGR_DEMANDA, VCR_DEMANDA, VG_DEMANDA, VM_DEMANDA, VC_DEMANDA
            AV80 = VGR_DEMANDA : REM VAV GRANDE RETORNO - DEMANDA ( % )
            AV81 = VCR_DEMANDA : REM VAV CHICA RETORNO - DEMANDA ( % )
            AV82 = VG_DEMANDA  : REM VAV GRANDE - DEMANDA ( % )
            AV83 = VM_DEMANDA  : REM VAV MEDIANA - DEMANDA ( % )
            AV84 = VC_DEMANDA  : REM VAV CHICA - DEMANDA ( % )


REM LOGICA DE CONTROL ***********************************************************************

    REM *ACUMULACION DE TIEMPO POR SCAN
    IF SCANS > 0 THEN VG_T = VG_T + (1 / SCANS)
    IF SCANS > 0 THEN VM_T = VM_T + (1 / SCANS)
    IF SCANS > 0 THEN VC_T = VC_T + (1 / SCANS)
    IF SCANS > 0 THEN VGR_T = VGR_T + (1 / SCANS)
    IF SCANS > 0 THEN VCR_T = VCR_T + (1 / SCANS)

    REM **CONTROL PI - VAV GRANDE (VG)
    IF SS_CP = 1 AND VG_ACT = 1 THEN
        REM ***ERROR DEL SISTEMA
            VG_ERR = (VG_Q - VG_Q_SP) * -1

        REM ***RESULTANTE PROPORCIONAL (Protegido contra división por cero)
            IF VG_Q_SP <> 0 AND VG_P <> 0 THEN
                VG_PR = (VG_ERR / (VG_Q_SP * VG_P)) * 100
            ELSE
                VG_PR = 0
            ENDIF

        REM ***RESULTANTE INTEGRAL (Protegido contra división por cero)
            IF VG_Q_SP <> 0 THEN
                 VG_IR = ((100 * VG_ERR) / VG_Q_SP) * VG_I
            ELSE
                 VG_IR = 0
            ENDIF

            IF VG_T > 1 THEN
                VG_IS = VG_IS + VG_IR
                VG_T = 0
            ENDIF
            REM ****LIMITACION ANTI-WINDUP
            VG_IS = MAX(MIN_L - 10, MIN(MAX_L + 10, VG_IS))

        REM ***DEMANDA DE SISTEMA
            VG_DEMANDA = VG_PR + VG_IS
            VG_DEMANDA = MAX(MIN_L, MIN(MAX_L, VG_DEMANDA))

    ELSE
        REM ***DESACTIVADO - Resetear valores PID
        VG_PR = 0
        VG_IR = 0
        VG_IS = 0
        VG_DEMANDA = 0
        VG_T = 0 : REM Resetear contador de tiempo
    ENDIF

    REM **CONTROL PI - VAV MEDIANA (VM)
    IF SS_CP = 1 AND VM_ACT = 1 THEN
        REM ***ERROR DEL SISTEMA
            VM_ERR = (VM_Q - VM_Q_SP) * -1

        REM ***RESULTANTE PROPORCIONAL (Protegido contra división por cero)
            IF VM_Q_SP <> 0 AND VM_P <> 0 THEN
                VM_PR = (VM_ERR / (VM_Q_SP * VM_P)) * 100
            ELSE
                VM_PR = 0
            ENDIF

        REM ***RESULTANTE INTEGRAL (Protegido contra división por cero)
            IF VM_Q_SP <> 0 THEN
                 VM_IR = ((100 * VM_ERR) / VM_Q_SP) * VM_I
            ELSE
                 VM_IR = 0
            ENDIF

            IF VM_T > 1 THEN
                VM_IS = VM_IS + VM_IR
                VM_T = 0
            ENDIF
            REM ****LIMITACION ANTI-WINDUP
            VM_IS = MAX(MIN_L - 10, MIN(MAX_L + 10, VM_IS))

        REM ***DEMANDA DE SISTEMA
            VM_DEMANDA = VM_PR + VM_IS
            VM_DEMANDA = MAX(MIN_L, MIN(MAX_L, VM_DEMANDA))

    ELSE
        REM ***DESACTIVADO - Resetear valores PID
        VM_PR = 0
        VM_IR = 0
        VM_IS = 0
        VM_DEMANDA = 0
        VM_T = 0 : REM Resetear contador de tiempo
    ENDIF

    REM **CONTROL PI - VAV CHICA (VC)
    IF SS_CP = 1 AND VC_ACT = 1 THEN
        REM ***ERROR DEL SISTEMA
            VC_ERR = (VC_Q - VC_Q_SP) * -1

        REM ***RESULTANTE PROPORCIONAL (Protegido contra división por cero)
            IF VC_Q_SP <> 0 AND VC_P <> 0 THEN
                VC_PR = (VC_ERR / (VC_Q_SP * VC_P)) * 100
            ELSE
                VC_PR = 0
            ENDIF

        REM ***RESULTANTE INTEGRAL (Protegido contra división por cero)
            IF VC_Q_SP <> 0 THEN
                 VC_IR = ((100 * VC_ERR) / VC_Q_SP) * VC_I
            ELSE
                 VC_IR = 0
            ENDIF

            IF VC_T > 1 THEN
                VC_IS = VC_IS + VC_IR
                VC_T = 0
            ENDIF
            REM ****LIMITACION ANTI-WINDUP
            VC_IS = MAX(MIN_L - 10, MIN(MAX_L + 10, VC_IS))

        REM ***DEMANDA DE SISTEMA
            VC_DEMANDA = VC_PR + VC_IS
            VC_DEMANDA = MAX(MIN_L, MIN(MAX_L, VC_DEMANDA))

    ELSE
        REM ***DESACTIVADO - Resetear valores PID
        VC_PR = 0
        VC_IR = 0
        VC_IS = 0
        VC_DEMANDA = 0
        VC_T = 0 : REM Resetear contador de tiempo
    ENDIF

    REM **CONTROL PI - VAV GRANDE RETORNO (VGR)
    IF SS_CP = 1 AND VGR_ACT = 1 THEN
        REM ***ERROR DEL SISTEMA
            VGR_ERR = (VGR_Q - VGR_Q_SP) * -1

        REM ***RESULTANTE PROPORCIONAL (Usa ganancias VG_P)
            IF VGR_Q_SP <> 0 AND VG_P <> 0 THEN
                VGR_PR = (VGR_ERR / (VGR_Q_SP * VG_P)) * 100
            ELSE
                VGR_PR = 0
            ENDIF

        REM ***RESULTANTE INTEGRAL (Usa ganancias VG_I)
            IF VGR_Q_SP <> 0 THEN
                 VGR_IR = ((100 * VGR_ERR) / VGR_Q_SP) * VG_I
            ELSE
                 VGR_IR = 0
            ENDIF

            IF VGR_T > 1 THEN
                VGR_IS = VGR_IS + VGR_IR
                VGR_T = 0
            ENDIF
            REM ****LIMITACION ANTI-WINDUP
            VGR_IS = MAX(MIN_L - 10, MIN(MAX_L + 10, VGR_IS))

        REM ***DEMANDA DE SISTEMA
            VGR_DEMANDA = VGR_PR + VGR_IS
            VGR_DEMANDA = MAX(MIN_L, MIN(MAX_L, VGR_DEMANDA))

    ELSE
        REM ***DESACTIVADO - Resetear valores PID
        VGR_PR = 0
        VGR_IR = 0
        VGR_IS = 0
        VGR_DEMANDA = 0
        VGR_T = 0 : REM Resetear contador de tiempo
    ENDIF

    REM **CONTROL PI - VAV CHICA RETORNO (VCR)
    IF SS_CP = 1 AND VCR_ACT = 1 THEN
        REM ***ERROR DEL SISTEMA
            VCR_ERR = (VCR_Q - VCR_Q_SP) * -1

        REM ***RESULTANTE PROPORCIONAL (Usa ganancias VC_P)
            IF VCR_Q_SP <> 0 AND VC_P <> 0 THEN
                VCR_PR = (VCR_ERR / (VCR_Q_SP * VC_P)) * 100
            ELSE
                VCR_PR = 0
            ENDIF

        REM ***RESULTANTE INTEGRAL (Usa ganancias VC_I)
            IF VCR_Q_SP <> 0 THEN
                 VCR_IR = ((100 * VCR_ERR) / VCR_Q_SP) * VC_I
            ELSE
                 VCR_IR = 0
            ENDIF

            IF VCR_T > 1 THEN
                VCR_IS = VCR_IS + VCR_IR
                VCR_T = 0
            ENDIF
            REM ****LIMITACION ANTI-WINDUP
            VCR_IS = MAX(MIN_L - 10, MIN(MAX_L + 10, VCR_IS))

        REM ***DEMANDA DE SISTEMA
            VCR_DEMANDA = VCR_PR + VCR_IS
            VCR_DEMANDA = MAX(MIN_L, MIN(MAX_L, VCR_DEMANDA))

    ELSE
        REM ***DESACTIVADO - Resetear valores PID
        VCR_PR = 0
        VCR_IR = 0
        VCR_IS = 0
        VCR_DEMANDA = 0
        VCR_T = 0 : REM Resetear contador de tiempo
    ENDIF

REM *********************************************************************************************

END